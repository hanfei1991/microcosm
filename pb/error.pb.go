// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: error.proto

package pb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ErrorCode int32

const (
	ErrorCode_None ErrorCode = 0
	// This master is not leader right now.
	ErrorCode_MasterNotLeader ErrorCode = 1
	// Executor has been removed so it can't be recognized.
	ErrorCode_UnknownExecutor ErrorCode = 2
	// no enough resource can be used.
	ErrorCode_NotEnoughResource ErrorCode = 3
	// submit subjob failed
	ErrorCode_SubJobSubmitFailed ErrorCode = 4
	// TombstoneExecuto
	ErrorCode_TombstoneExecutor ErrorCode = 5
	//
	ErrorCode_SubJobBuildFailed ErrorCode = 6
	// create gRPC connection failed
	ErrorCode_BuildGrpcConnFailed ErrorCode = 7
	// unknown or upsupported metastore type
	ErrorCode_InvalidMetaStoreType ErrorCode = 8
	// MasterNotReady means the master is staring up, and not ready to serve
	ErrorCode_MasterNotReady ErrorCode = 9
	ErrorCode_UnknownError   ErrorCode = 10001
)

var ErrorCode_name = map[int32]string{
	0:     "None",
	1:     "MasterNotLeader",
	2:     "UnknownExecutor",
	3:     "NotEnoughResource",
	4:     "SubJobSubmitFailed",
	5:     "TombstoneExecutor",
	6:     "SubJobBuildFailed",
	7:     "BuildGrpcConnFailed",
	8:     "InvalidMetaStoreType",
	9:     "MasterNotReady",
	10001: "UnknownError",
}

var ErrorCode_value = map[string]int32{
	"None":                 0,
	"MasterNotLeader":      1,
	"UnknownExecutor":      2,
	"NotEnoughResource":    3,
	"SubJobSubmitFailed":   4,
	"TombstoneExecutor":    5,
	"SubJobBuildFailed":    6,
	"BuildGrpcConnFailed":  7,
	"InvalidMetaStoreType": 8,
	"MasterNotReady":       9,
	"UnknownError":         10001,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0579b252106fcf4a, []int{0}
}

type NotLeader struct {
	// The requested server address
	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// leader address
	Leader string `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
}

func (m *NotLeader) Reset()         { *m = NotLeader{} }
func (m *NotLeader) String() string { return proto.CompactTextString(m) }
func (*NotLeader) ProtoMessage()    {}
func (*NotLeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_0579b252106fcf4a, []int{0}
}
func (m *NotLeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotLeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotLeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotLeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotLeader.Merge(m, src)
}
func (m *NotLeader) XXX_Size() int {
	return m.Size()
}
func (m *NotLeader) XXX_DiscardUnknown() {
	xxx_messageInfo_NotLeader.DiscardUnknown(m)
}

var xxx_messageInfo_NotLeader proto.InternalMessageInfo

func (m *NotLeader) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *NotLeader) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

type Error struct {
	Code      ErrorCode  `protobuf:"varint,1,opt,name=code,proto3,enum=pb.ErrorCode" json:"code,omitempty"`
	Message   string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	NotLeader *NotLeader `protobuf:"bytes,3,opt,name=not_leader,json=notLeader,proto3" json:"not_leader,omitempty"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0579b252106fcf4a, []int{1}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_None
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetNotLeader() *NotLeader {
	if m != nil {
		return m.NotLeader
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterType((*NotLeader)(nil), "pb.NotLeader")
	proto.RegisterType((*Error)(nil), "pb.Error")
}

func init() { proto.RegisterFile("error.proto", fileDescriptor_0579b252106fcf4a) }

var fileDescriptor_0579b252106fcf4a = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x91, 0xbd, 0x8e, 0xda, 0x40,
	0x14, 0x85, 0x3d, 0xfc, 0xfb, 0x92, 0x90, 0x61, 0x48, 0x88, 0x2b, 0x8b, 0x50, 0xa1, 0x28, 0xa2,
	0x48, 0xea, 0x34, 0x20, 0x12, 0x25, 0x0a, 0x2e, 0x0c, 0xa9, 0x23, 0xff, 0x5c, 0x11, 0x6b, 0xcd,
	0x5c, 0xef, 0x78, 0xbc, 0xbb, 0xbc, 0xc5, 0xee, 0x5b, 0x6d, 0x49, 0xb9, 0xe5, 0x0a, 0xde, 0x61,
	0xeb, 0x95, 0x8d, 0xed, 0x6e, 0xee, 0x39, 0xe7, 0x7e, 0x73, 0x46, 0x03, 0x7d, 0x54, 0x8a, 0xd4,
	0x3c, 0x51, 0xa4, 0x49, 0x34, 0x12, 0x7f, 0xfa, 0x1d, 0x4c, 0x87, 0xf4, 0x1f, 0xf4, 0x42, 0x54,
	0xc2, 0x82, 0xae, 0xc2, 0xeb, 0x0c, 0x53, 0x6d, 0xb1, 0x09, 0x9b, 0x99, 0x6e, 0x35, 0x8a, 0x31,
	0x74, 0xe2, 0x22, 0x63, 0x35, 0x0a, 0xa3, 0x9c, 0xa6, 0x0a, 0xda, 0xab, 0x9c, 0x28, 0x3e, 0x41,
	0x2b, 0xa0, 0x10, 0x8b, 0xbd, 0xc1, 0xd7, 0xb7, 0xf3, 0xc4, 0x9f, 0x17, 0xc6, 0x92, 0x42, 0x74,
	0x0b, 0x2b, 0xa7, 0xef, 0x31, 0x4d, 0xbd, 0x1d, 0x96, 0x90, 0x6a, 0x14, 0x5f, 0x00, 0x24, 0xe9,
	0x7f, 0xe5, 0x0d, 0xcd, 0x09, 0x9b, 0xf5, 0x2f, 0x88, 0xba, 0x9a, 0x6b, 0xca, 0xea, 0xf8, 0xf9,
	0x85, 0x81, 0x59, 0xb3, 0x45, 0x0f, 0x5a, 0x0e, 0x49, 0xe4, 0x86, 0x18, 0xc1, 0xbb, 0xb5, 0x97,
	0x6a, 0x54, 0xf5, 0x16, 0x67, 0xb9, 0xf8, 0x57, 0x5e, 0x49, 0xba, 0x95, 0xab, 0x3b, 0x0c, 0x32,
	0x4d, 0x8a, 0x37, 0xc4, 0x07, 0x18, 0x3a, 0xa4, 0x57, 0x92, 0xb2, 0xdd, 0x7f, 0x17, 0x53, 0xca,
	0x54, 0x80, 0xbc, 0x29, 0xc6, 0x20, 0x36, 0x99, 0xff, 0x9b, 0xfc, 0x4d, 0xe6, 0xef, 0x23, 0xfd,
	0xc3, 0x8b, 0x62, 0x0c, 0x79, 0x2b, 0x8f, 0x6f, 0x69, 0xef, 0xa7, 0x9a, 0x24, 0xd6, 0x94, 0x76,
	0x2e, 0x5f, 0xe2, 0x8b, 0x2c, 0x8a, 0xc3, 0x32, 0xdd, 0x11, 0x1f, 0x61, 0x54, 0x08, 0x3f, 0x55,
	0x12, 0x2c, 0x49, 0xca, 0xd2, 0xe8, 0x0a, 0x0b, 0xde, 0xff, 0x92, 0x37, 0x5e, 0x1c, 0x85, 0x6b,
	0xd4, 0xde, 0x46, 0x93, 0xc2, 0xed, 0x21, 0x41, 0xde, 0x13, 0x02, 0x06, 0x75, 0x73, 0x17, 0xbd,
	0xf0, 0xc0, 0x4d, 0x31, 0x84, 0x37, 0x55, 0xf1, 0xfc, 0xad, 0xfc, 0xc1, 0x59, 0x58, 0x8f, 0x27,
	0x9b, 0x1d, 0x4f, 0x36, 0x7b, 0x3e, 0xd9, 0xec, 0xfe, 0x6c, 0x1b, 0xc7, 0xb3, 0x6d, 0x3c, 0x9d,
	0x6d, 0xc3, 0xef, 0x14, 0x1f, 0xfa, 0xed, 0x35, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x44, 0x30, 0x2f,
	0xdf, 0x01, 0x00, 0x00,
}

func (m *NotLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotLeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotLeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Leader) > 0 {
		i -= len(m.Leader)
		copy(dAtA[i:], m.Leader)
		i = encodeVarintError(dAtA, i, uint64(len(m.Leader)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Request) > 0 {
		i -= len(m.Request)
		copy(dAtA[i:], m.Request)
		i = encodeVarintError(dAtA, i, uint64(len(m.Request)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotLeader != nil {
		{
			size, err := m.NotLeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintError(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintError(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintError(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintError(dAtA []byte, offset int, v uint64) int {
	offset -= sovError(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NotLeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	l = len(m.Leader)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovError(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovError(uint64(l))
	}
	if m.NotLeader != nil {
		l = m.NotLeader.Size()
		n += 1 + l + sovError(uint64(l))
	}
	return n
}

func sovError(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozError(x uint64) (n int) {
	return sovError(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NotLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotLeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotLeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthError
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotLeader == nil {
				m.NotLeader = &NotLeader{}
			}
			if err := m.NotLeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipError(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowError
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthError
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupError
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthError
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthError        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowError          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupError = fmt.Errorf("proto: unexpected end of group")
)
