// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/metaclient/kv.go

// Package mock_metaclient is a generated GoMock package.
package mock_metaclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metaclient "github.com/hanfei1991/microcosm/pkg/metaclient"
)

// MockTxn is a mock of Txn interface.
type MockTxn struct {
	ctrl     *gomock.Controller
	recorder *MockTxnMockRecorder
}

// MockTxnMockRecorder is the mock recorder for MockTxn.
type MockTxnMockRecorder struct {
	mock *MockTxn
}

// NewMockTxn creates a new mock instance.
func NewMockTxn(ctrl *gomock.Controller) *MockTxn {
	mock := &MockTxn{ctrl: ctrl}
	mock.recorder = &MockTxnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxn) EXPECT() *MockTxnMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTxn) Commit() (*metaclient.TxnResponse, metaclient.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(*metaclient.TxnResponse)
	ret1, _ := ret[1].(metaclient.Error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockTxnMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxn)(nil).Commit))
}

// Do mocks base method.
func (m *MockTxn) Do(ops ...metaclient.Op) metaclient.Txn {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range ops {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(metaclient.Txn)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockTxnMockRecorder) Do(ops ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockTxn)(nil).Do), ops...)
}

// MockKV is a mock of KV interface.
type MockKV struct {
	ctrl     *gomock.Controller
	recorder *MockKVMockRecorder
}

// MockKVMockRecorder is the mock recorder for MockKV.
type MockKVMockRecorder struct {
	mock *MockKV
}

// NewMockKV creates a new mock instance.
func NewMockKV(ctrl *gomock.Controller) *MockKV {
	mock := &MockKV{ctrl: ctrl}
	mock.recorder = &MockKVMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKV) EXPECT() *MockKVMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKV) Delete(ctx context.Context, key string, opts ...metaclient.OpOption) (*metaclient.DeleteResponse, metaclient.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*metaclient.DeleteResponse)
	ret1, _ := ret[1].(metaclient.Error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockKVMockRecorder) Delete(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKV)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockKV) Get(ctx context.Context, key string, opts ...metaclient.OpOption) (*metaclient.GetResponse, metaclient.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*metaclient.GetResponse)
	ret1, _ := ret[1].(metaclient.Error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKVMockRecorder) Get(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKV)(nil).Get), varargs...)
}

// Put mocks base method.
func (m *MockKV) Put(ctx context.Context, key, val string) (*metaclient.PutResponse, metaclient.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, key, val)
	ret0, _ := ret[0].(*metaclient.PutResponse)
	ret1, _ := ret[1].(metaclient.Error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockKVMockRecorder) Put(ctx, key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKV)(nil).Put), ctx, key, val)
}

// Txn mocks base method.
func (m *MockKV) Txn(ctx context.Context) metaclient.Txn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Txn", ctx)
	ret0, _ := ret[0].(metaclient.Txn)
	return ret0
}

// Txn indicates an expected call of Txn.
func (mr *MockKVMockRecorder) Txn(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Txn", reflect.TypeOf((*MockKV)(nil).Txn), ctx)
}

// MockError is a mock of Error interface.
type MockError struct {
	ctrl     *gomock.Controller
	recorder *MockErrorMockRecorder
}

// MockErrorMockRecorder is the mock recorder for MockError.
type MockErrorMockRecorder struct {
	mock *MockError
}

// NewMockError creates a new mock instance.
func NewMockError(ctrl *gomock.Controller) *MockError {
	mock := &MockError{ctrl: ctrl}
	mock.recorder = &MockErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockError) EXPECT() *MockErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockError)(nil).Error))
}

// IsRetryable mocks base method.
func (m *MockError) IsRetryable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRetryable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRetryable indicates an expected call of IsRetryable.
func (mr *MockErrorMockRecorder) IsRetryable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRetryable", reflect.TypeOf((*MockError)(nil).IsRetryable))
}
