syntax = "proto3";

package pb;

import "error.proto";
import "executor.proto";
import "metastore.proto";

// I'm trying to phase out the communication protocal.
// - system level
//   - Register Executor. After a executor bootstrapped, it has to register itself to join the cluster.


service Master {
    rpc RegisterExecutor(RegisterExecutorRequest) returns(RegisterExecutorResponse) {}

    rpc SubmitJob(SubmitJobRequest) returns(SubmitJobResponse) {
        // TODO: Support HTTP api
        //option (google.api.http) = {
        //    post: "/apis/v1/jobs"
        //    body: "*"
        //};
    }

    rpc CancelJob(CancelJobRequest) returns(CancelJobResponse) {}

    //GetMembers returns the available master members
    //rpc GetMembers(GetMembersRequest) {}

    rpc Heartbeat(HeartbeatRequest) returns(HeartbeatResponse) {}
    // TODO: Support more interface.

    // - PutClusterConfig

    rpc ScheduleTask(TaskSchedulerRequest) returns(TaskSchedulerResponse) {}

    /* Metastore manager API */
    // RegisterMetaStore is called from backend metastore and
    // registers to server master metastore manager
    rpc RegisterMetaStore(RegisterMetaStoreRequest) returns(RegisterMetaStoreResponse) {}

    // QueryMetaStore queries metastore manager and returns
    // the information of a matching metastore
    rpc QueryMetaStore(QueryMetaStoreRequest) returns(QueryMetaStoreResponse) {}
}

message HeartbeatRequest {
    string executor_id = 1;
    int32 resource_usage = 2;
    int32 status = 3;
    
    uint64 timestamp = 4;
    uint64 ttl = 5;
}

message HeartbeatResponse {
    Error err = 1;
}

message SubmitJobRequest {
    // For compatibility, we still use config file to present a job.
    enum JobType {
        DM = 0;
        CDC = 1;
        Benchmark = 2;
    }
    JobType tp = 1;
    bytes config = 2;
    // User name, token, etc...
    string user = 3;
    // TODO: Resource Limit
}

message CancelJobRequest {
    int32 job_id = 1;
}

message SubmitJobResponse {
    Error err = 1;
    int32 job_id = 2;
}

message CancelJobResponse {
    Error err = 1;
}

message RegisterExecutorRequest {
    // dm need 'worker-name' to locate the worker.
    // TODO: Do we really need a "worker name"? Can we use address to identify an executor?
    string address = 1;
    string version = 2;
    int64  capability = 3;
}

message RegisterExecutorResponse {
    Error err = 1;
    string  executor_id = 2;
}

message ScheduleTask{
    TaskRequest task = 1;
    int64 cost = 2;
    string preferred_location = 3;
}

// TaskSchedulerRequest is sent from job master to server master, server master
// applies resource from resource manager, allocates executor to tasks.
// The request contains an array of ScheduleTask.
message TaskSchedulerRequest {
    repeated ScheduleTask tasks = 1;
}

// ScheduleResult represents the where the task(sub job) will be running.
// Currently it contains an executor id.
message ScheduleResult {
    string executor_id = 1;
}

message TaskSchedulerResponse {
    map<int32, ScheduleResult> schedule = 1;
}
